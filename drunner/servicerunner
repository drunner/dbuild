#!/bin/bash
                                                                                                                                                          
#  ad88888ba                                        88                          88888888ba                                                                  
# d8"     "8b                                       ""                          88      "8b                                                                 
# Y8,                                                                           88      ,8P                                                                 
# `Y8aaaaa,     ,adPPYba,  8b,dPPYba,  8b       d8  88   ,adPPYba,   ,adPPYba,  88aaaaaa8P'  88       88  8b,dPPYba,   8b,dPPYba,    ,adPPYba,  8b,dPPYba,  
#   `"""""8b,  a8P_____88  88P'   "Y8  `8b     d8'  88  a8"     ""  a8P_____88  88""""88'    88       88  88P'   `"8a  88P'   `"8a  a8P_____88  88P'   "Y8  
#         `8b  8PP"""""""  88           `8b   d8'   88  8b          8PP"""""""  88    `8b    88       88  88       88  88       88  8PP"""""""  88          
# Y8a     a8P  "8b,   ,aa  88            `8b,d8'    88  "8a,   ,aa  "8b,   ,aa  88     `8b   "8a,   ,a88  88       88  88       88  "8b,   ,aa  88          
#  "Y88888P"    `"Ybbd8"'  88              "8"      88   `"Ybbd8"'   `"Ybbd8"'  88      `8b   `"YbbdP'Y8  88       88  88       88   `"Ybbd8"'  88          



#------------------------------------------------------------------------------------
# Initialisation of globals.

set -o nounset
MYDIR=$( dirname "$(readlink -f "$0")" )
source "$MYDIR/variables.sh"
source "$MYDIR/utils.sh"
e=$(printf "\e") 
readonly CODE_S="$e[32m"
readonly CODE_E="$e[0m"

#------------------------------------------------------------------------------------
# showhelp - give some info about the service. SERVICENAME and IMAGENAME are provided by variables.sh.

function showhelp {
cat <<EOF >&2

NAME
   ${SERVICENAME}
       
SYNOPSIS
   ${SERVICENAME} [-a] build
   ${SERVICENAME} [-a] copyup
   ${SERVICENAME} [-a] info|branch
   ${SERVICENAME} [-a] push [COMMITMSG]
   
   ${SERVICENAME} configure     
   
DESCRIPTION
   A simple dRunner container from ${IMAGENAME}.
   
EOF
}

#------------------------------------------------------------------------------------

function sayinfo { echo -e "[ \e[2m${1}\e[0m ]" ; }
function saygood { echo -e "[ \e[32m${1}\e[0m ]" ; }
function saybad { echo -e "[ \e[31m\e[1m${1}\e[0m ]" ; }

function dockerrun {
   docker run -i --name="${SERVICENAME}-${COMMAND}" -h "${HOSTNAME}" "${DOCKEROPTS[@]}" "${IMAGENAME}" "$@"
   local RVAL=$?
   docker rm "${SERVICENAME}-${COMMAND}" >/dev/null
   if [ $RVAL -ne 0 ]; then die "${SERVICENAME} ${COMMAND} failed." ; fi
}

function isdev {
   local BRANCH=$(cd "$1" ; git rev-parse --abbrev-ref HEAD 2>/dev/null)
   [ "$BRANCH" = "dev" ]
}

function branch_low {
   local P="$1"
   local BRANCH=$(cd "$1" ; git rev-parse --abbrev-ref HEAD 2>/dev/null) || { saybad "$P - not a git repo" ; return 1 ; }
   [ "$BRANCH" = "dev" ] && { saygood "$P - dev" ; return 0 ; }
   [ "$BRANCH" = "master" ] && { sayinfo "$P - master" ; return 0 ; }
   [ -n "$BRANCH" ] || { sayinfo "$P - No repo" ; return 1 ; }
   sayinfo "$P - $BRANCH"   
}

function push_low {
   local P="$1"
   isdev "$P" || { saybad "For safety we only push to dev branch." ; return 1 ; }
   (
      cd "$P" ; git add . ; git commit -m "$COMMITMSG"; git push
      local BRANCH=$(cd "$P" ; git rev-parse --abbrev-ref HEAD 2>/dev/null)
      saygood "Pushed $P -> $BRANCH"
      sayifo  "Commit message: $COMMITMSG"
   )
}

function build_low {
   local P="$1"
   [ -e "$P/imagename" ] || { saybad "$P - missing imagename" ; return 1 ; }
   local IMAGENAME=$(<"$P/imagename")
   [ -n "IMAGENAME" ] || { saybad "$P - imagename empty" ; return 1 ; }
   (
      local BRANCH=$(cd "$P" ; git rev-parse --abbrev-ref HEAD 2>/dev/null)
      [ "$BRANCH" = "master" ] || IMAGENAME="${IMAGENAME}:${BRANCH}"
      cd "$P" ; docker build -t "${IMAGENAME}" . && saygood "Built ${IMAGENAME}"
   )
}

function copyup_low {
   local P="$1"
   isdev "$P" || { saybad "For safety we only copy up when already in dev branch." ; return 1 ; }
   (
      cd "$P" ; git pull ; git checkout master ; git merge dev ; git push ; git checkout dev   
   )
}


function runcmd {
   [ -v DEVPATH ] || { "$1" "$PWD" ; return 0 ; }  
   (
   cd "$DEVPATH" ; for d in */ ; do "$1" "$d" ; done
   )   
}

#------------------------------------------------------------------------------------
# The main function. We can add any commands we'd like here!

function main {
   [ "$#" -gt 0 ] || { showhelp ; exit 1 ; }
   COMMAND="${1}" ; shift

   if [ "$COMMAND" = "-a" ]; then
      DEVPATH=$(dockerrun cat /config/path) || die "Call ${SERVICENAME} configure first."
      [ "$#" -gt 0 ] || { showhelp ; exit 1 ; }
      COMMAND="${1}" ; shift      
   fi
   
   case "$COMMAND" in 
   
          #--- standard (required) commands
   
         install)
            ;;
            
         obliterate)
            ;;
                     
         uninstall)
            ;;
                     
         backupstart)
            #BACKUPPATH="$1"
            ;;
         
         backupend)
            #BACKUPPATH="$1"
            ;;
         
         restore)
            #RESTOREPATH="$1"
            ;;
         
         help)
            showhelp
            ;;
         
         enter)
            dockerrun /bin/bash "$@"
            ;;
         
         updatestart)
            ;;

         updateend)
            ;;
         
         selftest)
            ;;
            
         #--- custom commands

         build)
            runcmd build_low
            ;;
            
         copyup)
            runcmd copyup_low
            ;;
            
         info|branch)
            runcmd branch_low
            ;;
            
         push)
            COMMITMSG="auto commit by j842/build"
            [ $# -eq 0 ] || COMMITMSG="$1"
            runcmd push_low
            ;;
            
         configure)
            dockerrun bash -c "echo $PWD > /config/path"
            DEVPATH=$(dockerrun cat /config/path) || die "Configure failed."
            echo "Path set to $DEVPATH"
            ;;
                        
         #--- unrecognised commands

         *)
            showhelp
            die "Unrecognised command ${CODE_S}${COMMAND}${CODE_E}"            
            ;;
   esac
}

#------------------------------------------------------------------------------------

main "$@"
